## LRU 캐시 ##
>> 캐시 공간이 가득찼을 때, 가장 오랬동안 접근하지 않은 데이터를 제거하는 알고리즘입니다.

	어떤 자료구조로 구현할 수 있나요?
	>> 위해 더블링크드리스트 사용하고 
	   해시맵을 사용합니다.

		리스트 대신 배열을 사용하면 어떨까요?
		>> 캐시의 접근 순서를 관리하기 위한 자료구조로 배열을 사용한다면
			접근 순서가 바뀔때마다 쉬프트 연산이 발생하여 매번 O(N) 의 연산이 수행되므로 비효율적이됩니다.


	해시맵을 쓰는 이유가 뭔가요?
	>> O(1) 복잡도로 원하는 노드에 접근하기 위합입니다.
	   해시맵의 각 엔트리는 밸류에 노드 주소를 저장함으로써 O(1) 복잡도로 원하는 노드에 접근할 수 있게 됩니다.

	왜 더블링크드리스트를 쓰나요?
	>> head 와 tail 포인터를 통해 노드를 추가하고 삭제하는 과정 둘다 O(1) 로 접근하기 위함입니다.

	카페인캐시
	>> 
		- LRU, LFU 알고리즘의 장점을 섞은 tinyLFU 라는 알고리즘 사용
			- LFU 알고리즘으로 인해 자주 사용되는 데이터는 protected 영역에서 보관되어, 
			  LRU 에 의해 제거되지 않는 방식

		- 벤치마크 성능 우수

	- https://www.youtube.com/watch?v=HpuIrGiHwTo
	- https://medium.com/naverfinancial/니들이-caffeine-맛을-알아-f02f868a6192





## 캐시 전략 ##
