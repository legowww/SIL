경쟁조건
> 여러 쓰레드가 동시에 공유자원에 접근하는 순서에 따라 실행결과가 달라질 수 있는 상황 

임계영역
> 동시에 하나의 쓰레드만 접근해야만 하는 코드 영역, 여러 쓰레드가 임계영역에 동시에 접근하면 임계영역 문제가 발생한다.

임계영역문제해결
> 1. 상호배제: 임계영역에는 동시에 하나의 쓰레드만 접근할 수 있다.
  2. 한정대기: 대기중인 쓰레드는 언젠간 진입할 수 있어야한다.
  3. 진행: 임계영역에 쓰레드가 존재하지않는다면 진입할 수 있어야한다.

동시성문제
> 하나의 쓰레드가 데이터를 쓰고있는 과정에서 다른 쓰레드가 같은 데이터를 쓰거나 읽는 과정에서 발생하는 문제
뮤텍스락, 세마포어, 모니터락 CAS 등과 같은 동기화 기법을 사용하여 해결해야 합니다.

뮤텍스락? 
> 뮤텍스락은 임계영역에 오직 하나의 스레드만이 접근하여 상호배제를 보장하는 락 메카니즘입니다.
  임계영역에 진입하기 전에 락을 획득하고, 임계영역을 빠져나온 후 락을 반납하는 방식입니다.

세마포어?
> 세마포어는 임계영역에 정해진 카운트만큼의 스레드만 진입할 수 있는 동기화 메카니즘입니다..
쓰레드풀이나 DB Connection 처럼 주로 리소스의 한정적인 사용을 제어하기 위한 용도로 사용됩니다.
	
	> 동작 방식?
		임계영역에 진입할때, wait 동작을 통해 카운트를 하나 감소시키고
		임계영역에서 빠져나올때, signal 을 통해 카운트를 하나 증가시키는 방식으로 동작합니다.

	> 뮤텍스과의 차이점?
		뮤텍스의 경우 상호배제를 보장히지만, 세마포어의 경우 이진세마포어가 아닌 경우 상호배제를 보장할 수 없습니다.
		또한 락의 소유권에서 차이점이있습니다. 뮤텍스는 락을 획득한 스레드만이 락을 반납할 수 있지만, 세마포어의 경우 세마포어를 사용하는 모든 스레드들이 세마포어를 해제할 수 있습니다.


모니터락?
> 자바가 동기화를 지원하기 위해 사용하는 락 메카니즘으로 synchronized 키워드를 통해 사용할 수 있습니다. 
Object 를 상속한 모든 객체는 각자의 모니터를 가집니다. 상호배제를 위해 뮤텍스락를 사용하고, 스레드 간 협력을 위해 조건변수를 사용할 수 있습니다. 또한 synchornized 범위에서 참조하는 변수들은 모두 가시성을 보장받는 특징이 있습니다.

스핀락?
> 스레드가 임계영역에 진입할 수 있는지 끊임없이 검사하는 동기화 기법입니다.
락을 획득하지 못해도 블로킹이 일어나지 않아 컨텍스트스위칭 비용을 감소시키지만, 락 획득 시도를 위해 CPU 리소스가 계속하여 사용된다는 단점이 있습니다.


CAS?
> Compare and Swap 의 약자로, CPU 캐시와 메인메모리에서의 공유변수 값을 비교하여 동일한 경우 새로운 값으로 치환하는 연산입니다. CAS 연산은 CPU에 의해 원자적인 실행을 보장받습니다. 또한 락을 사용하지 않아 논블라킹으로 동작하여 데드락 또한 발생하지 않는 장점이있습니다.

자바에서는 ConcurrentHashMap, AtomicInteger 같은 coucrrent 패키지의 클래스들은 내부적으로 원자적 연산을 보장하는 native(c언어로 구현된) 가 붙은 compareAndSwap 메서드를 사용합니다. ConcurrentHashMap 의 경우 SynchoronziedMap 과 성능을 비교했을때 락을 사용하지 않아 더 좋은 성능을 나타냅니다.


volatile?
> 자바에서 가시성 문제를 해결하는 키워드입니다. 변수 앞에 volatile을 사용하면 항상 메인메모리에 존재하는 값을 읽고, 수정된 값을 바로 반영하기 때문에 가시성을 보장받을 수 있습니다.

또한 자바에서는 volatile 키워드를 사용하지 않아도 Atomic 클래스, Lock 클래스, synhronized 를 사용한다면 
사용하는 변수에 대해 가시성을 보장받을 수 있습니다.

	> 가시성?
	가시성은 한 스레드의 작업 내용이 다른 스레드에서 어떻게 보여지는지 나타내는 개념입니다.
	작업중인 CPU는 메인메모리에서 공유변수를 처음 읽은 후부터는 더 빠른 접근을 위해 CPU 캐시에 저장된 값을 읽습니다.
	이 때, 메인메모리에는 이미 값이 변경됐지만 계속하여 캐시에 있는 공유변수를	 읽을 경우 결과적으로 데이터 일관성이 깨지게 됩니다. 이러한 문제를 해결하기 위해서는 가시성을 보장받아야 합니다. 



데드락?
> 스레드들이 서로가 가진 자원을 기다리며 무한히 대기하는 상태입니다.
	
	> 발생조건?
		1. 상호배제: 자원은 하나의 스레드만 소유한다.
		2. 점유대기: 자원을 가진 상태에서 자원을 요구한다.
		3. 비선점: 스레드가 자원을 반납하기 전까지 뺏을 수 없다.
		4. 순환대기: 각 스레드는 다음 스레드가 원한느 자원을 가지고 있어야한다.
		모두를 충족해야 데드락이 발생한다.

	> 데드락 방지 어떻게?
		1. 락 타임아웃을 설정하거나
		2. 스레드가 여러개의 락을 소유하지 않도록 작성하는 방법이 있을 것 같습니다.
		3. 또한 락을 설정하더라도 정확히 임계영역에만 설정하여 락의 범위를 최소화할 것 같습니다.



스레드세이프?
> 여러 스레드에서 동시에 접근해도 안전한 코드를 스레드 세이프 하다고 합니다.
스프링은 멀티스레드로 동작하는 프로그램이기때문에 스레드 세이프한 방법을 코드를 작성해야합니다.

	> 어떻게 작성해야해?
		1. 로컬 변수를 사용합니다. 스택을 사용하기때문에 다른 스레드가 접근할 수 없습니다,
		2. 불변 객체를 사용합니다. 변경되지 않으므로 무조건 안전하다.
		2. 쓰레드 로컬 사용: 시큐리티 컨텍스트 홀더, 트랜잭션 동기화
		3. 자바에서 제공하는 synchronized, Lock, CAS 등과 같은 동기화 기법을 사용한다.


프로그래밍(JPA)
- 낙관적 락
- 비관적 락
- 분산락(+DB)

DB
- 쓰기 락
- 공유 락
